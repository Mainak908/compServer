generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CENTER
  ADMIN
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  role     Role     @default(CENTER)
  password String
  Center   Center[] // central admin onek center manage korte parbe
}

model Center {
  id         Int          @id @default(autoincrement())
  Centername String
  locationX  Float
  locationY  Float
  Student    Enrollment[]
  admin      User?        @relation(fields: [adminid], references: [id], onDelete: Cascade)
  adminid    Int
  address    String
  code       String
}

model Enrollment {
  id              Int    @id @default(autoincrement())
  Enrollmentno    String @unique
  IdCardNo        String @unique
  idCardLink      String @default("")
  admitLink       String @default("")
  certificateLink String @default("")
  marksheetLink   String @default("")

  name     String
  dob      DateTime
  father   String
  mother   String
  address  String
  mobileNo String
  wpNo     String

  eduqualification String
  activated        Boolean @default(false)

  examformFillup ExamForm?
  marks          Marks?
  amount         Amount?

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int

  center    Center   @relation(fields: [centerid], references: [id])
  centerid  Int
  createdAt DateTime @default(now())

  @@index([Enrollmentno])
}

model Course {
  id       Int    @id @default(autoincrement())
  CName    String
  price    Int
  Duration Int

  Enrollment Enrollment[]
}

model Amount {
  id                   Int        @id @default(autoincrement())
  TotalPaid            Int
  amountRemain         Int
  lastPaymentRecieptno String?
  enrollment           Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno])
  EnrollmentNo         String     @unique
  createdAt            DateTime   @default(now())
}

model ExamForm {
  id Int @id @default(autoincrement())

  enrollment     Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno])
  EnrollmentNo   String     @unique
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  ExamCenterCode String
  ATI_CODE       String
}

model Marks {
  id           Int        @id @default(autoincrement())
  marks        Json
  remarks      Remark
  enrollment   Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno])
  EnrollmentNo String     @unique
  grade        String
  totalMarks   Float
  percentage   Float
  verified     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  year         String
}

enum Remark {
  PASS
  FAIL
}

model Enquiry {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
