generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CENTER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
  TRANSGENDER
}

enum Category {
  SC
  ST
  GENERAL
  OBC
  PH
  OTHERS
}

enum Nationality {
  INDIAN
  FOREIGNER
}

enum statusType {
  passout
  dropout
  pending
}

enum IdType {
  aadhar
  voter
  drivingLicense
}

enum Remark {
  PASS
  FAIL
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String
  role             Role      @default(CENTER)
  password         String
  Center           Center[]  @relation("CenterAdmin")
  resetToken       String?
  resetTokenExpiry DateTime?
}

model Center {
  id         Int          @id @default(autoincrement())
  Centername String
  Student    Enrollment[]
  admin      User         @relation("CenterAdmin", fields: [adminid], references: [id], onDelete: Cascade)
  adminid    Int
  address    String
  code       Int          @default(autoincrement())
}

model Enrollment {
  id              Int         @id @default(autoincrement())
  Enrollmentno    Int         @unique @default(autoincrement())
  IdCardNo        Int         @unique @default(autoincrement())
  idCardLink      String      @default("")
  admitLink       String      @default("")
  certificateLink String      @default("")
  marksheetLink   String      @default("")
  imageLink       String      @default("")
  CertificateNo   Int?        @unique @default(autoincrement())
  name            String
  dob             DateTime
  father          String
  mother          String
  address         String
  mobileNo        String
  wpNo            String
  sex             Sex
  category        Category
  nationality     Nationality
  idProof         IdType
  idProofNo       String

  eduqualification String
  activated        Boolean @default(false)

  examformFillup ExamForm?
  marks          Marks?
  amount         Amount?

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  center    Center     @relation(fields: [centerid], references: [id])
  centerid  Int
  createdAt DateTime   @default(now())
  status    statusType

  @@index([Enrollmentno, status])
}

model Course {
  id         Int          @id @default(autoincrement())
  CName      String
  price      Int
  Duration   Int
  Enrollment Enrollment[]
  subjects   String[]
}

model Amount {
  id                   Int        @id @default(autoincrement())
  TotalPaid            Int
  amountRemain         Int
  lastPaymentRecieptno String?
  enrollment           Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno], onDelete: Cascade)
  EnrollmentNo         Int        @unique
  createdAt            DateTime   @default(now())
}

model ExamForm {
  id             Int        @id @default(autoincrement())
  enrollment     Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno], onDelete: Cascade)
  EnrollmentNo   Int        @unique
  verified       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  ExamCenterCode String
  ATI_CODE       String
  practExmdate   String
  theoryExamdate String
  practExmtime   String
  theoryExmtime  String
  sem            String
}

model Marks {
  id           Int        @id @default(autoincrement())
  marks        Json
  remarks      Remark
  enrollment   Enrollment @relation(fields: [EnrollmentNo], references: [Enrollmentno], onDelete: Cascade)
  EnrollmentNo Int        @unique
  grade        String
  totalMarks   Float
  percentage   Float
  verified     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  year         String
  serialNo     Int        @default(autoincrement())
}

model Enquiry {
  id                     Int         @id @default(autoincrement())
  name                   String
  email                  String      @unique
  father                 String
  coName                 String
  dist                   String
  state                  String
  pin                    String
  ps                     String
  po                     String
  vill                   String
  dob                    DateTime
  sex                    Sex
  category               Category
  nationality            Nationality
  mobileNo               String
  AddressLine            String
  eduqualification       String
  idProof                IdType
  idProofNo              String
  houseRoomNo            String
  squareFit              String
  tradeLicense           String
  bathroom               Boolean
  signatureLink          String
  stateCoordinator       String
  districtCoordinator    String
  subdistrictCoordinator String
  verified               Boolean     @default(false)
  createdAt              DateTime    @default(now())
}

model Notices {
  id      Int      @id @default(autoincrement())
  heading String
  body    String
  upto    DateTime
}
